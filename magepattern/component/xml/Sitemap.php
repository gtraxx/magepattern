<?php
namespace Magepattern\Component\XML;
use Magepattern\Component\Debug\Logger,
    Magepattern\Component\Tool\StringTool,
    Magepattern\Component\Tool\DateTool;

class Sitemap extends \XMLWriter
{
    /**
     * url valid sitemap standard
     * @var string $NS
     */
    protected string $NS = 'http://www.sitemaps.org/schemas/sitemap/0.9';

    /**
     * URI schema Google sitemap image
     * @var string $googleimages_xmlns
     */
    protected string $googleimages_xmlns = 'http://www.google.com/schemas/sitemap-image/1.1';

    /**
     * tabs for changeFreq
     * @var array $changeFreqControl
     */
    protected array $changeFreqControl = ['always','hourly','daily','weekly','monthly','yearly','never'];

    /**
     * @var array siteMapURL
     */
    private array $siteMapURL = [];

    /**
     * Sitemap constructor.
     */
    public function __construct()
    {
        try {
            if(!extension_loaded('xmlwriter')) throw new \Exception('extension xmlwriter not loaded',E_WARNING);
        }
        catch(\Exception $e) {
            Logger::getInstance()->log($e,"php", "error", Logger::LOG_MONTH, Logger::LOG_LEVEL_ERROR);
            return null;
        }
    }

    /**
     * Create XML File
     * @param string $file
     */
    public function createNewFile(string $file)
    {
        if (!file_exists($file)) {
            $handle = @fopen($file,'a+');
            if($handle && !@chmod($file,0755)) fclose($handle);
        }
    }

    /**
     * Open File and Create new xmlwriter using source uri for output
     * @param string $uri
     */
    public function openUri($uri)
    {
        try {
            if (file_exists($uri)) throw new \Exception(sprintf('%s is not writable', $uri),E_WARNING);
            if (!is_writable($uri)) throw new \Exception(sprintf('%s not file exist', $uri),E_WARNING);
            parent::openUri($uri);
        }
        catch(\Exception $e) {
            Logger::getInstance()->log($e,"php", "error", Logger::LOG_MONTH, Logger::LOG_LEVEL_ERROR);        }
    }

    /**
     * XML Sitemap File header
     * @param string $encode
     * @param string $type
     */
    public function headerSitemap($encode = 'UTF-8',$type ='child')
    {
        $this->startDocument('1.0', $encode);
        $this->writeComment('Generated by Mage Pattern');
        $element = match($type){
            'parent' => 'sitemapindex',
            'child', 'image' => 'urlset'
        };
        $this->startElement ($element); // [1] First Node
        $this->writeAttribute('xmlns' , $this->NS);
        if($type === 'image') $this->writeAttribute('xmlns:image' , $this->googleimages_xmlns);
    }

    /**
     * @param string $type
     * @param string $loc
     * @param array $image
     * @param string $lastmod
     * @param string $changefreq
     * @param string $priority
     */
    public function writeNode(string $type = 'child', string $loc = '', array $image = [], string $lastmod = ',', string $changefreq = 'always', string $priority = '0.7')
    {
        $dataFormat = new DateTool();
        $element = match($type){
            'parent' => 'sitemap',
            'child', 'image' => 'url'
        };
        $this->startElement ($element);// [2] Second Node
        $this->writeElement('loc',StringTool::isURL($loc));
        switch($type){
            case 'child':
                $this->writeElement('changefreq',$changefreq);
                $this->writeElement('priority',$priority);
            case 'parent':
                $this->writeElement('lastmod',$dataFormat->dateW3C($lastmod));
                break;
            case 'image':
                if(!empty($image)){
                    $this->startElement('image:image');// [2] Second Node
                    if(isset($image['loop'])) {
                        foreach($image['loop'] as $key) {
                            $this->writeElement('image:loc',StringTool::isURL($image['url'].$key));
                        }
                    }
                    elseif($image['imageloc'] != NULL) $this->writeElement('image:loc',StringTool::isURL($image['url'].$image['imageloc']));
                }
                break;
        }
        $this->endElement();

    }
}